
package com.example.demo.model;

import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.Map;

public class DataItem {
    @JsonProperty("fieldToFilter")
    private String fieldToFilter;

    private Map<String, Object> additionalData;

    // Getters and Setters
    public String getFieldToFilter() {
        return fieldToFilter;
    }

    public void setFieldToFilter(String fieldToFilter) {
        this.fieldToFilter = fieldToFilter;
    }

    public Map<String, Object> getAdditionalData() {
        return additionalData;
    }

    public void setAdditionalData(Map<String, Object> additionalData) {
        this.additionalData = additionalData;
    }
}



============
@RestController
@RequestMapping("/api")
public class FilterController {

    @PostMapping("/filter")
    public ResponseEntity<List<DataItem>> filterData(@RequestBody List<DataItem> dataItems,
                                                      @RequestParam String filterValue) {
        List<DataItem> filteredItems = dataItems.stream()
                .filter(item -> filterValue.equals(item.getFieldToFilter()))
                .collect(Collectors.toList());

        return ResponseEntity.ok(filteredItems);
    }
}


=========
[
    {
        "fieldToFilter": "valueToMatch",
        "additionalData": {"key1": "value1"}
    },
    {
        "fieldToFilter": "otherValue",
        "additionalData": {"key2": "value2"}
    }
]

=======
package com.example.demo.controller;

import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/products")
public class ProductController {

    @PostMapping("/filter")
    public List<Map<String, Object>> filterProducts(@RequestBody List<Map<String, Object>> products, @RequestParam Map<String, String> filters) {
        return products.stream()
                .filter(product -> filters.entrySet().stream().allMatch(entry -> {
                    String key = entry.getKey();
                    String value = entry.getValue();
                    
                    // Handle missing keys gracefully
                    if (!product.containsKey(key)) {
                        return false;
                    }
                    
                    // Check if the value matches
                    Object productValue = product.get(key);
                    return productValue.toString().equalsIgnoreCase(value);
                }))
                .collect(Collectors.toList());
    }
}


import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public class XmlReader {
    public static void main(String[] args) {
        String xmlString = "<root>" +
                "<item><name>Item 1</name><value>Value 1</value></item>" +
                "<item><name>Item 2</name><value>Value 2</value></item>" +
                "<item><name>Item 3</name><value>Value 3</value></item>" +
                "</root>";

        try {
            // Convert the XML string to an InputStream
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document document = builder.parse(new java.io.ByteArrayInputStream(xmlString.getBytes()));

            // Normalize the XML structure
            document.getDocumentElement().normalize();

            // Get all elements
            NodeList nodeList = document.getDocumentElement().getChildNodes();

            // Iterate through the elements and print their values
            for (int i = 0; i < nodeList.getLength(); i++) {
                Node node = nodeList.item(i);
                if (node.getNodeType() == Node.ELEMENT_NODE) {
                    Element element = (Element) node;
                    System.out.println("Element: " + element.getNodeName());
                    System.out.println("Value: " + element.getTextContent());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
